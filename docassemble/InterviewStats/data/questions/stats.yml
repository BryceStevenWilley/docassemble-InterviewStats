---
metadata:
  title: Administrative interview
  short title: Admin
  # sessions are unique: True
  required privileges:
    - admin
---
modules:
  - .snapshot_statistics
---
objects:
  - xlsx_output: DAFile.using(filename="stats.xlsx")
---
id: interview order
mandatory: True
code: |
  filename
  formatted_data
  saved_data
  view_data
---
code: |
  xlsx_output.initialize(filename="stats.xlsx")
  writer = pd.ExcelWriter(xlsx_output.path(),
    engine='xlsxwriter',
    options={'remove_timezone': True})
  formatted_data.to_excel(writer, index=False)
  writer.save()
  xlsx_output.commit()  
  del writer
  saved_data = True
---
question: |
  What interview do you want to view statistics for?  
fields:
  - Filename: filename
    code: |
      [{interview.get('filename'): interview.get('title')} for interview in interview_menu()]
---
code: |
  if 'data/questions' in filename:
    stats = get_stats(filename)
  else:
    stats = get_stats(filename.replace(':',':data/questions/'))
---
code: |
  first_row = next(iter(stats))
  if first_row and isinstance(first_row, tuple) and isinstance(first_row[1], dict):
    columns = list(first_row[1].keys())
---
code: |
  # import numpy as np
  import pandas as pd
---
code: |
  for stat in stats:
    stat[1]['Modtime'] = stat[0]
  formatted_data = pd.DataFrame([stat[1] for stat in stats])
---
event: view_data
question: |
  Total number of results: ${ len(stats) }
subquestion: |
  Group by: 
  % for col in columns:
  [${col}](${ url_action('show_grouped_data', group_by = col ) }) 
  % endfor
  
  ${ formatted_data.to_html(classes=('table','table-striped'), index=False) }
  
  [:file-excel: Download](${ xlsx_output.url_for() })
buttons:
  - Restart: restart
---
event: show_grouped_data
question: |
  Total number of results: ${ len(stats) }
subquestion: |  
  Group by: 
  % for col in columns:
  [${col}](${ url_action('show_grouped_data', group_by = col)  }) 
  % endfor
  
  ${ formatted_data.groupby(by=action_argument('group_by')).count().to_html(classes=('table','table-striped')) }
  
  [:file-excel: Download](${ xlsx_output.url_for() })
buttons:
  - Restart: restart  